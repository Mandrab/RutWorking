openapi: 3.0.0

info:
  version: "1.0.0"
  title: RutWorking
  description: >-
    RESTful API for the RutWorking service.

# TODO ?
security:
  - bearerAuth: []

tags:
  - name: users
    description: All about users. Login, registration, data obtainment, etc..
  - name: projects
    description: Project operations. Creation, management, etc..
  - name: modules
    description: Module management. Creation, management, etc..
  - name: chats
    description: Operations on chat messages. Push, get, etc..
  - name: kanbans
    description: Operations on kanban tasks. Push, obtainment, get, etc..
  - name: contest
    description: Gamification of the platform. Allow to get contest status and reset it
  - name: notifications
    description: Operation to set the new firebase token to which send notifications

paths:

  '/login':
    post:
      tags: [users]
      summary: Login with an user and get an access token (JWT)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userEmail:
                  type: string
                  description: Email of the user to login with
                password:
                  type: string
                  description: Password of the user to login with
        required: true
      responses:
        200:
          description: Succesfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  userRole:
                    type: string
                    enum: [admin, user]
        401:
          description: Email or password is wrong
        403:
          description: Account is blocked
        404:
          description: User not found

  '/user/{userEmail}':
    post:
      tags: [users]
      summary: Register a new user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userEmail
          description: Email of the user to register
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, user]
                  description: Role in the system
                name:
                  type: string
                  description: Name of the user
                surname:
                  type: string
                  description: Surname of the user
        required: true
      responses:
        201:
          description: User registered
        400:
          description: Some fields haven't been passed
        403:
          description: Only an admin can register a new user
        404:
          description: User-token not found
        406:
          description: User already exists
    put:
      tags: [users]
      summary: Change password of an user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userEmail
          description: Email of the user
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: Old password of the user
                newPassword:
                  type: string
                  description: New password of the user
        required: true
      responses:
        200:
          description: Password changed
        400:
          description: Some fields haven't been passed
        401:
          description: Old password is wrong
        403:
          description: Unauthorized
        404:
          description: User not found
    get:
      tags: [users]
      security: 
        - bearerAuth: []
      summary: Get info about the user
      parameters:
        - in: path
          name: userEmail
          description: Email of the user to which get informations
          schema:
            type: string
          required: true
      responses:
        200:
          description: Information about the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the user
                  surname:
                    type: string
                    description: Surname of the user
                  email:
                    type: string
                    description: Email of the user
                  role:
                    type: string
                    enum: [admin, user]
                    description: Role of the user in the system
                  blocked:
                    type: boolean
                    description: Specify if the user has been blocked
        403:
          description: Only an user or an admin can retrieve informations
        404:
          description: User not found
    delete:
      tags: [users]
      summary: Block access to an user
      parameters:
        - in: path
          name: userEmail
          description: Email of the user to block
          schema:
            type: string
          required: true
      responses:
        200:
          description: User blocked
        403:
          description: Only an admin can block an user
        404:
          description: User not found

  '/users':
    get:
      tags: [users]
      security: 
        - bearerAuth: []
      summary: Get list first 100 of users
      responses:
        200:
          description: List of first 100 (the ones with highest score) users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      type: string
                      description: Email of the user
                    name:
                      type: string
                      description: Name of the user
                    surname:
                      type: string
                      description: Surname of the user
                    role:
                      type: string
                      enum: [admin, user]
                      description: Role of the user in the system
                    blocked:
                      type: boolean
                      description: Specify if the user has been blocked
        403:
          description: Only an user or an admin can retrieve informations

  '/users/{skipN}':
    get:
      tags: [users]
      security: 
        - bearerAuth: []
      summary: Get list of 100 users
      parameters:
        - in: path
          name: skipN
          description: Skip first N users while getting 100 users by score
          schema:
            type: string
          required: true
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      type: string
                      description: Email of the user
                    name:
                      type: string
                      description: Name of the user
                    surname:
                      type: string
                      description: Surname of the user
                    role:
                      type: string
                      enum: [admin, user]
                      description: Role of the user in the system
                    blocked:
                      type: boolean
                      description: Specify if the user has been blocked
        403:
          description: Only an user or an admin can retrieve informations

  '/projects':
    get:
      tags: [projects]
      summary: Get info of first 100 projects
      responses:
        200:
          description: Up to FIRST 100 project
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the project
                    chief:
                      type: string
                      description: Email of the project's chief
                    description:
                      type: string
                      description: Description of the project. May not exist
                    deadline:
                      type: string
                      description: Deadline of the project
                    modules:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Name of the module
                          chief:
                            type: string
                            description: Email of the module's chief
                          description:
                            type: string
                            description: OPTIONAL description of the module. Not set if description is not present
                          deadline:
                            type: string
                            description: OPTIONAL deadline of the module. Not set if deadline is not present
        403:
          description: Account is blocked
        404:
          description: User-token not found

  '/projects/{skipN}':
    get:
      tags: [projects]
      summary: Get info of 100 projects from a certain value (i.e., skipping first Ns)
      parameters:
        - in: path
          name: skipN
          description: Skip first N projects
          schema:
            type: number
          required: true
      responses:
        200:
          description: Up to 100 project
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the project
                    chief:
                      type: string
                      description: Email of the project's chief
                    description:
                      type: string
                      description: Description of the project. May not exist
                    deadline:
                      type: string
                      description: Deadline of the project
                    modules:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Name of the module
                          chief:
                            type: string
                            description: Email of the module's chief
                          description:
                            type: string
                            description: OPTIONAL description of the module. Not set if description is not present
                          deadline:
                            type: string
                            description: OPTIONAL deadline of the module. Not set if deadline is not present
        403:
          description: Account is blocked
        404:
          description: User-token not found
  
  '/projects/{skipN}/{user}':
    get:
      tags: [projects]
      summary: Get info of 100 projects from a certain value and related to specified user (i.e., in wich works or is chief)
      parameters:
        - in: path
          name: skipN
          description: Skip first N projects
          schema:
            type: number
          required: true
        - in: path
          name: user
          description: Email of a user. Used to get project on which a user works
          schema:
            type: string
          required: true
      responses:
        200:
          description: Up to 100 project
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the project
                    chief:
                      type: string
                      description: Email of the project's chief
                    description:
                      type: string
                      description: Description of the project. May not exist
                    deadline:
                      type: string
                      description: Deadline of the project
                    modules:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Name of the module
                          chief:
                            type: string
                            description: Email of the module's chief
                          description:
                            type: string
                            description: OPTIONAL description of the module. Not set if description is not present
                          deadline:
                            type: string
                            description: OPTIONAL deadline of the module. Not set if deadline is not present
                          member:
                            type: boolean
                            description: True if the user specified in the path works in this module or is chief
        403:
          description: Account is blocked
        404:
          description: User-token not found

  '/projects/project/{projectName}':
    post:
      tags: [projects]
      summary: Create a new project and become its chief
      parameters:
        - in: path
          name: projectName
          description: Identifier of the project
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Description of the project
                deadline:
                  type: string
                  description: Deadline of the project
        required: true
      responses:
        201:
          description: Project created
        403:
          description: Account is blocked
        404:
          description: User-token not found
        409:
          description: Project with same name already exists
    get:
      tags: [projects]
      summary: Get project info (submodules). Needs to be a member of the project
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
      responses:
        200:
          description: Info of the project
          content:
            application/json:
              schema:
                type: object
                properties:
                    name:
                      type: string
                      description: Name of the project
                    chief:
                      type: string
                      description: Email of the project's chief
                    description:
                      type: string
                      description: Description of the project. May not exist
                    deadline:
                      type: string
                      description: Deadline of the project
                    modules:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Name of the module
                          chief:
                            type: string
                            description: Email of the module's chief
                          description:
                            type: string
                            description: OPTIONAL description of the module. Not set if description is not present
                          deadline:
                            type: string
                            description: OPTIONAL deadline of the module. Not set if deadline is not present
        403:
          description: Account is blocked
        404:
          description: Project or user-token not found
    delete:
      tags: [projects]
      summary: Delete specified project
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
      responses:
        200:
          description: Project succesfully removed
        403:
          description: Account is blocked
        404:
          description: Project or user-token not found

  '/projects/{projectName}/modules/{moduleName}':
    post:
      tags: [modules]
      summary: Create a new module
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chief:
                  type: string
                  description: Email of the future module chief
      responses:
        201:
          description: Module created
        403:
          description: Not project-chief. Otherwise the account is blocked.
        404:
          description: Project or user not found
        409:
          description: Module with same name already exist inside the project
    get:
      tags: [modules]
      summary: Get info about a module
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      responses:
        200:
          description: Module info
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the module
                  chief:
                    type: string
                    description: Email of the module's chief
                  description:
                    type: string
                    description: OPTIONAL description of the module. Not set if description is not present
                  deadline:
                    type: string
                    description: OPTIONAL deadline of the module. Not set if deadline is not present
                  developers:
                    type: array
                    items:
                      type: string
                      description: email of the developer
        403:
          description: Not project/module-chief nor developer or admin. Otherwise the account is blocked.
        404:
          description: Project or user-token not found
    delete:
      tags: [modules]
      summary: Delete a module in the project
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      responses:
        200:
          description: Module succesfully removed
        403:
          description: Not module-chief. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found

  '/projects/{projectName}/modules/{moduleName}/developers/{userEmail}':
    post:
      tags: [modules]
      summary: Add an user as a module developer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
        - in: path
          name: userEmail
          description: Email of the user to add
          schema:
            type: string
          required: true
      responses:
        200:
          description: Developer added
        403:
          description: Not module-chief. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found
    delete:
      tags: [modules]
      summary: Remove a developer from a project. It reset it's assigned tasks as 'TO-DO'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
        - in: path
          name: userEmail
          description: Email of the user to add
          schema:
            type: string
          required: true
      responses:
        200:
          description: Developer succesfully removed
        403:
          description: Not module-chief. Otherwise the account is blocked.
        404:
          description: Project, module or users not found

  '/projects/{projectName}/modules/{moduleName}/messages':
    post:
      tags: [chats]
      summary: Push a message on the module chat
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Message text
        required: true
      responses:
        201:
          description: Message pushed
        403:
          description: Not developer or chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found
        409:
          description: No message
    get:
      tags: [chats]
      summary: Get first 100 messages from the module chat
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      responses:
        200:
          description: Up to first 100 messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    sender:
                      type: string
                      description: Email of the message sender
                    message:
                      type: string
        403:
          description: Not developer or chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found

  '/projects/{projectName}/modules/{moduleName}/messages/{skipN}':
    get:
      tags: [chats]
      summary: Get 100 messages from the module chat from a certain value (i.e., skipping first Ns)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
        - in: path
          name: skipN
          description: Skip first N messages
          schema:
            type: number
          required: true
      responses:
        200:
          description: Up to 100 messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    sender:
                      type: string
                      description: Email of the message sender
                    message:
                      type: string
        403:
          description: Not developer or chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found

  '/projects/{projectName}/modules/{moduleName}/kanban':
    post:
      tags: [kanbans]
      summary: Publish a task in the module kanban
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Task name
                description:
                  type: string
                  description: Task description. OPTIONAL value
                status:
                  type: string
                  enum: [TO-DO, ASSIGNED, IN-PROGRESS, DONE]
                  description: "Status of the task. OPTIONAL value: by default it's TO-DO"
                assignee:
                  type: string
                  description: 'Email of the user to which assign the task. OPTIONAL value: it would usually be empty at creation'
        required: true
      responses:
        201:
          description: Task pushed
        403:
          description: Not chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found
        409:
          description: No task specified or task with same name already exist inside the kanban
    get:
      tags: [kanbans]
      summary: Get first 100 tasks from the module kanban
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
      responses:
        200:
          description: Up to 100 tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID of the task
                    name:
                      type: string
                      description: Task name
                    taskDescription:
                      type: string
                      description: Description of the task. If no description is specified, this var will not be available
                    status:
                      type: string
                      enum: [TO-DO, ASSIGNED, IN-PROGRESS, DONE]
                      description: Progress status of the task
                    assignee:
                      type: string
                      description: Email of the developer assigned. If no user is assigned, this var will not be available
        403:
          description: Not developer or chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found

  '/projects/{projectName}/modules/{moduleName}/kanban/{skipN}':
    get:
      tags: [kanbans]
      summary: Get 100 tasks from the module kanban from a certain value (i.e., skipping first Ns)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
        - in: path
          name: skipN
          description: Skip first N messages
          schema:
            type: number
          required: true
      responses:
        200:
          description: Up to 100 tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID of the task
                    name:
                      type: string
                      description: Task name
                    taskDescription:
                      type: string
                      description: Description of the task. If no description is specified, this var will not be available
                    status:
                      type: string
                      enum: [TO-DO, ASSIGNED, IN-PROGRESS, DONE]
                      description: Progress status of the task
                    assignee:
                      type: string
                      description: Email of the developer assigned. If no user is assigned, this var will not be available
        403:
          description: Not developer or chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module or user-token not found

  '/projects/{projectName}/modules/{moduleName}/kanban/{taskID}':
    put:
      tags: [kanbans]
      summary: Update a task in the module kanban
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
        - in: path
          name: taskID
          description: ID of the task to update
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newState:
                  type: string
                  enum: [TO-DO, ASSIGNED, IN-PROGRESS, DONE]
                  description: New state of the task
                assignee:
                  type: string
                  description: Email of the user to be assigned. It could be omitted if the new state is `TO-DO`
        required: true
      responses:
        200:
          description: Task pushed
        403:
          description: Not developer or chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module, task or user-token not found
        409:
          description: No task specified or invalid state / assignee
    delete:
      tags: [kanbans]
      summary: Delete a task from the module kanban
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectName
          description: Name of the project
          schema:
            type: string
          required: true
        - in: path
          name: moduleName
          description: Name of the module
          schema:
            type: string
          required: true
        - in: path
          name: taskID
          description: ID of the task to remove
          schema:
            type: string
          required: true
      responses:
        200:
          description: Task removed
        403:
          description: Not chief of the module. Otherwise the account is blocked.
        404:
          description: Project, module, task or user-token not found
  
  '/contest/reset':
    put:
      tags: [contest]
      summary: Reset the actual score in the contest
      security:
        - bearerAuth: []
      responses:
        200:
          description: Succesfully reset
        403:
          description: Account is blocked
        404:
          description: User not found
        409:
          description: Token not passed
  
  '/contest/ranking':
    get:
      tags: [contest]
      summary: List 100 users with scores from higher to lower
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of 100 users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      type: string
                      description: email of the user
                    name:
                      type: string
                      description: name of the user
                    surname:
                      type: string
                      description: surname of the user
                    score:
                      type: number
                      description: score in the system. It could also be negative if user does not properly complete works
        403:
          description: Account is blocked
        404:
          description: User not found
        409:
          description: Token not passed
  
  '/contest/ranking/{skipN}':
    get:
      tags: [contest]
      summary: List 100 users with scores from higher to lower skipping first N
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: skipN
          description: Skip first N users and return 100 of them
          schema:
            type: number
          required: true
      responses:
        200:
          description: List of 100 users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      type: string
                      description: email of the user
                    name:
                      type: string
                      description: name of the user
                    surname:
                      type: string
                      description: surname of the user
                    score:
                      type: number
                      description: score in the system. It could also be negative if user does not properly complete works
        403:
          description: Account is blocked
        404:
          description: User not found
        409:
          description: Token not passed

  '/firebase/notification':
    put:
      tags: [notifications]
      summary: Set firebase token to which send notifications
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firebaseToken:
                  type: string
                  description: Token to which send notifications through firebase
        required: true
      responses:
        200:
          description: Token registered
        403:
          description: Account is blocked
        404:
          description: User not found
        409:
          description: Token not passed
  
  '/notifications':
    get:
      tags: [notifications]
      summary: Get last 50 notifications
      security:
        - bearerAuth: []
      responses:
        200:
          description: Array of last 50 notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic:
                      type: string
                      enum: [chat_message, developer_added, task_completed]
                      description: Topic of the notification
                    projectName:
                      type: string
                      description: Name of the project
                    moduleName:
                      type: string
                      description: Name of the module
                    message:
                      type: string
                      description: Message of the notification
                    senderEmail:
                      type: string
                      description: Email of the user whose actions have generated the notification
                    seen:
                      type: boolean
                      description: True if the notification was seen
        403:
          description: Unauthorized
  '/notifications/unseen/count':
    get:
      tags: [notifications]
      summary: Get number of unseen notifications
      security:
        - bearerAuth: []
      responses:
        200:
          description: Number of unseen notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  unseenNotifications:
                    type: number
                    description: Number of unseen notifications
        403:
          description: Unauthorized

components:
  schemas: {}
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes Json Web Token

# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/pb.mandrab/RutWorking/1.0.0